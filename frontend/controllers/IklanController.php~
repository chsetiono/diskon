<?php

namespace frontend\controllers;

use Yii;
use backend\models\Produk;
use backend\models\User;
use backend\models\ProdukSearch;
use backend\models\Kategori;
use backend\models\File;
use backend\models\Komentar;
use frontend\models\Rating;
use frontend\models\Mark;
use frontend\models\Notifikasi;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;
use yii\base\Model;
use yii\web\IdentityInterface;
use yii\helpers\Html;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
/**
 * IklanController implements the CRUD actions for Produk model.
 */
class IklanController extends Controller
{
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['create', 'update', 'pasang'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['create', 'update', 'pasang','view'],
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    /**
     * Lists all Produk models.
     * @return mixed
     */

    public function actionIndex()
    {
        $searchModel = new ProdukSearch();
	$kategori = Kategori::find()
	    ->where(['parent' =>null])
	    ->all();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
	    'kategori'=>$kategori,
        ]);
    }
    public function actionManage()
    {
        $searchModel = new ProdukSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('iklan_saya', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Produk model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {

        $model=$this->findModel($id);
        $picture=File::find()->where(['id_item'=>$id])->all();
	$user=User::find()->where(['id'=>$model->user_id])->one();
        $komentar=$this->getKomentar($id);
        
	return $this->render('view', [
			    'model' => $model,
			    'picture'=>$picture,
			    'user'=>$user,
			    'komentar'=>$komentar,
			]);

    }


  public function actionViewajax($id)
    {

        $model=$this->findModel($id);
        $picture=File::find()->where(['id_item'=>$id])->all();
	$user=User::find()->where(['id'=>$model->user_id])->one();
        $komentar=$this->getKomentar($id);
        
	return $this->renderPartial('viewAjax', [
			    'model' => $model,
			    'picture'=>$picture,
			    'user'=>$user,
			    'komentar'=>$komentar,
			]);

    }


    /**
     * Creates a new Produk model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    
    public function actionCreate()
    {
        $model = new Produk();
	$kategori=$this->getKategoriTree();
        if ($model->load(Yii::$app->request->post())) {
	    $model->user_id=Yii::$app->user->id;
	    $model->status="1";
	    $model->dtcreate=date('Y-m-d:H:I:s');
	    $model->imageFiles = UploadedFile::getInstances($model, 'imageFiles');
            if ($model->save()){
               $model->upload();
		return $this->redirect(['iklan/view', 'id' => $model->id_produk]);
            } 
        }
            return $this->render('create', [
                'model' => $model,
		'kategori'=>$kategori,
		//'files' => $files,
            ]);
       
    }


    /**
     * Updates an existing Produk model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
	$files = File::find()->where(['id_item'=>$id])->all();
	$count=count($files);
	$limit=1;
	$i=$count+1;
	while($i <= $limit) {
        $files[$i] = new File();
	$i++;
    	}
	
	$kategori=$this->getKategoriTree();
        $model->user_id=Yii::$app->user->id;
        if ($model->load(Yii::$app->request->post()) && Model::loadMultiple($files, Yii::$app->request->post()) ) {
		foreach ($files as $index=>$file) {
		        $files[$index]->upload_file = UploadedFile::getInstance($file, '['.$index.']upload_file');
		    }
	   	if($model->validate() && Model::validateMultiple($files)){
		    foreach ($files as $index=>$file) {
			if($file->upload_file!=null){
			$file->id_item=$id;
			$file->order=$index;
			$file->nama_file=time()."-".$model->id_produk."-".$index.".".$file->upload_file->extension;
		        $file->save(false);
 			$file->upload_file->saveAs('upload/produk/' . $file->nama_file);
			}
		}
 		return $this->redirect(['view', 'id' => $model->id_produk]);
	   }
           }
       
            return $this->render('update', [
                'model' => $model,
		'kategori'=>$kategori,
		'files'=>$files,
            ]);
       
    }
    
    public function actionRate(){
        $id_item=$_GET['id'];
	$rate = new Rating();
        $rate->id_item=$id_item;
        $rate->id_user=Yii::$app->user->id;
        if ($rate->load(Yii::$app->request->post())) {
            if($rate->save()){
             echo "<div>sukses rating</div>";    
            }
        }else{
            return $this->renderAjax('rate', [
                'rate' => $rate,
            ]);
       }
    
   }
    public function actionKomentar(){
        $id_item=$_GET['id'];
	$komentar= new Komentar();
        $komentar->id_produk=$id_item;
        $komentar->id_user=Yii::$app->user->id;
	$komentar->dtcreate=date('Y-m-d :H:i:s');
        if ($komentar->load(Yii::$app->request->post())) {
            if($komentar->save()){
              Yii::$app->session->setFlash('success', 'Sukses komentar ');
              return $this->redirect(['view', 'id' => $id_item]);
              
            }
        }
            return $this->renderAjax('_form_comment', [
                'komentar' => $komentar,
            ]);
      
   }
    public function actionSave(){ 
	if (Yii::$app->user->isGuest){
 		return $this->redirect(['/site/login']);
        }else{
        $id_item=$_GET['id'];
	$mark= new Mark();
        $mark->id_item=$id_item;
        $mark->id_user=Yii::$app->user->id;
	$mark->dtcreate=date('Y-m-d :H:i:s');
        if($mark->save()){
              echo Html::a(' Like', ['iklan/unsave','id'=>$id_item], ['class' => 'btn btn-info btn-info glyphicon glyphicon-heart-empty save-index']);
        }
        }
   }
    public function actionUnsave(){ 
	if (Yii::$app->user->isGuest){
 		return $this->redirect(['/site/login']);
        }else{
		$id_item=$_GET['id'];
		$mark= Mark::find()->where(['id_item'=>$id_item,'id_user'=>Yii::$app->user->id])->one();
		if($mark->delete()){
		      echo Html::a(' Like', ['iklan/save','id'=>$id_item], ['class' => 'btn  btn-default glyphicon glyphicon-heart-empty save-index']);
		}
        }
   }
   
   
     
    /**
     * Deletes an existing Produk model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['manage']);
    }

    /**
     * Finds the Produk model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Produk the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Produk::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

   public function getKomentar ($id_produk){
	$queryKomentar=Komentar::find();
        $queryKomentar->joinWith(['user_rel']);
	$queryKomentar->andFilterWhere([
            'id_produk' => $id_produk,
        ])->orderBy('dtcreate desc');
        $komentar = new ActiveDataProvider([
	    'query' => $queryKomentar,
	    'pagination' => [
		'pageSize' => 10,
	    ],
	]);
        return $komentar;
   }
    public function getKategoriTree($id_parent = null, $spacing = '', $category_tree_array = '') 
        {
       
	    $kategori = Kategori::find()
	    ->where(['parent' => $id_parent])
	    ->all();
            foreach($kategori as $v)
            {
                    $category_tree_array[$v['kategori_id']]=$spacing . $v['nama_kategori'];
                    $category_tree_array = $this->getKategoriTree($v['kategori_id'], $spacing . '---', $category_tree_array);
            }
            return $category_tree_array;
        }

}
